from PyQt5.QtWidgets import QApplication, QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton, QMessageBox
import subprocess

class ADBParametersDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("ADB参数配置")
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        layout.addWidget(QLabel("设备ID:"))
        self.device_id_edit = QLineEdit()
        layout.addWidget(self.device_id_edit)

        layout.addWidget(QLabel("包名:"))
        self.package_name_edit = QLineEdit()
        layout.addWidget(self.package_name_edit)

        layout.addWidget(QLabel("活动名:"))
        self.activity_name_edit = QLineEdit()
        layout.addWidget(self.activity_name_edit)

        self.detect_button = QPushButton("检测ADB参数")
        self.detect_button.clicked.connect(self.detect_adb_parameters)
        layout.addWidget(self.detect_button)

        self.manual_guide_button = QPushButton("手动获取ADB参数指引")
        self.manual_guide_button.clicked.connect(self.show_manual_guide)
        layout.addWidget(self.manual_guide_button)

        self.setLayout(layout)

    def detect_adb_parameters(self):
        try:
            devices_output = subprocess.check_output(["adb", "devices"], encoding='utf-8')
            device_lines = devices_output.splitlines()[1:]
            if device_lines:
                device_id = device_lines[0].split()[0]
                self.device_id_edit.setText(device_id)

                dumpsys_output = subprocess.check_output(["adb", "-s", device_id, "shell", "dumpsys", "activity", "activities"], encoding='utf-8')
                found_activity_info = False
                for line in dumpsys_output.splitlines():
                    if "mResumedActivity" in line:
                        found_activity_info = True
                        activity_info = line.split()[-2]
                        package_name, activity_name = activity_info.split("/")
                        self.package_name_edit.setText(package_name)
                        self.activity_name_edit.setText(activity_name)
                        break
                
                # 如果未找到前台活动信息，提醒用户唤醒设备
                if not found_activity_info:
                    QMessageBox.warning(self, "设备休眠", "检测到设备但未获取到前台活动。请唤醒设备并确保应用处于前台。")

            else:
                QMessageBox.warning(self, "未检测到设备", "请连接设备并开启USB调试。")
        except subprocess.CalledProcessError as e:
            QMessageBox.warning(self, "执行ADB命令出错", str(e))

    def show_manual_guide(self):
        guide_text = (
            "手动获取ADB参数指引：\n"
            "1. 设备ID：在命令行中输入 'adb devices'，设备ID将在命令输出中显示。\n"
            "2. 包名和活动名：在命令行中输入 'adb shell dumpsys activity activities | grep mResumedActivity'，"
            "应用的包名和活动名将在命令输出中显示。\n\n"
            "请确保您的设备已通过USB连接到计算机，并且已在开发者选项中启用了USB调试。"
        )
        QMessageBox.information(self, "手动获取ADB参数指引", guide_text)

if __name__ == "__main__":
    app = QApplication([])
    dialog = ADBParametersDialog()
    dialog.show()
    app.exec_()
