import requests
from bs4 import BeautifulSoup
import chardet
import tkinter as tk
from tkinter import filedialog
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def get_links_selenium(url):
    options = webdriver.ChromeOptions()
    service = webdriver.chrome.service.Service(ChromeDriverManager().install())
    browser = webdriver.Chrome(service=service, options=options)

    browser.get(url)
    WebDriverWait(browser, 10).until(EC.presence_of_all_elements_located((By.TAG_NAME, 'a')))  # 等待所有链接加载完成
    links = browser.find_elements(By.TAG_NAME, 'a')
    hrefs = [link.get_attribute('href') for link in links if link.get_attribute('href') is not None]

    browser.quit()
    return hrefs

def get_links_requests(url):
    response = requests.get(url)
    response.raise_for_status()

    detected_encoding = chardet.detect(response.content)['encoding']
    response.encoding = detected_encoding if detected_encoding else 'utf-8'

    soup = BeautifulSoup(response.text, 'html.parser')
    return [link['href'] for link in soup.find_all('a', href=True)]

def write_to_file(links, output_filename):
    with open(output_filename, 'w', encoding='utf-8') as file:
        for href in links:
            markdown_link = f"[-]({href})"
            file.write(markdown_link + '\n')

# 初始化TKinter
root = tk.Tk()
root.withdraw()

# 使用对话框让用户输入URL
url = input("请输入要提取Markdown链接的网页的URL: ")

if not url:
    print("未输入URL。程序已退出。")
    root.destroy()
    exit()

# 使用对话框请求用户选择保存文件的目录
output_directory = filedialog.askdirectory(title="选择保存文件的目录")

if not output_directory:
    print("未选择保存目录。程序已退出。")
    root.destroy()
    exit()

output_filename = f"{output_directory}/markdown_links.txt"

# 获取动态和静态内容的链接
links_selenium = get_links_selenium(url)
links_requests = get_links_requests(url)

# 合并链接并写入文件
all_links = list(set(links_selenium + links_requests))
write_to_file(all_links, output_filename)

print(f"所有的Markdown链接已经被写入到文件 {output_filename}。")

root.destroy()