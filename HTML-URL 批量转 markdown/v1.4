import requests
from bs4 import BeautifulSoup
import chardet
import tkinter as tk
from tkinter import filedialog
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def get_page_structure_selenium(url):
    options = webdriver.ChromeOptions()
    service = webdriver.chrome.service.Service(ChromeDriverManager().install())
    browser = webdriver.Chrome(service=service, options=options)

    browser.get(url)
    WebDriverWait(browser, 10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'h1, h2, h3, h4, h5, h6, a')))

    page_structure = []
    elements = browser.find_elements(By.CSS_SELECTOR, 'h1, h2, h3, h4, h5, h6, a') 
    for element in elements:
        tag_name = element.tag_name
        if tag_name in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
            page_structure.append(("#" * int(tag_name[1]), element.text.strip()))
        elif tag_name == 'a':
            href = element.get_attribute('href')
            text = element.text.strip() or "No Text"
            if href:
                page_structure.append(("", f"[{text}]({href})"))
    
    browser.quit()
    return page_structure

def write_page_structure_to_file(page_structure, output_filename):
    with open(output_filename, 'w', encoding='utf-8') as file:
        for depth, content in page_structure:
            if depth:
                file.write('\n' + depth + " " + content + '\n\n')  # 将标题写入文件
            else:
                file.write(content + '\n')  # 将链接写入文件

# 初始化TKinter
root = tk.Tk()
root.withdraw()

url = input("请输入要提取Markdown链接的网页的URL:")

if not url:
    print("未输入URL。程序已退出。")
    root.destroy()
    exit(1)

output_directory = filedialog.askdirectory(title="请选择保存文件的目录")

if not output_directory:
    print("未选择保存目录。程序已退出。")
    root.destroy()
    exit(1)

output_filename = f"{output_directory}/markdown_links_with_structure.txt"

# 从Selenium获取包含层级结构的链接和标题
page_structure = get_page_structure_selenium(url)

# 写入到文件
write_page_structure_to_file(page_structure, output_filename)

print(f"Markdown链接和网页结构已经被写入到文件 {output_filename}。")

root.destroy()
